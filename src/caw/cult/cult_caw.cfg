{
  base_dir:    "/home/kevin/src/caw/src/caw/cult/io",
  io_dict:     "/home/kevin/src/caw/src/caw/cult/io.cfg"            // Runtime configuration file.
  proc_dict:   "/home/kevin/src/caw/src/libcw/flow/proc_dict.cfg", // Processor class definition file.
  udp_dict:    "/home/kevin/src/caw/src/libcw/flow/udp_dict.cfg",  // User defined proc files
  tracer: {  trace_cnt:1024, msg_cnt: 1024000, enable_fl:false, activate_fl:false, out_fname:"tracer" }
    
  programs: {


   ex_00_mod_sine: {

      //dur_limit_secs:30.0,  // Run the network for 5 seconds
      //non_real_time_fl: false,
      
      network: {

        procs: {
          lfo:   { class: sine_tone, args:{ hz:3, dc:440, gain:110 }}
          sh:    { class: sample_hold,            in:{ in:lfo.out } }
          osc:   { class: sine_tone, preset:mono, in:{ hz:sh.out } },
	  aout:  { class:audio_out, in:{ in:osc.out }, args:{ dev_label:"main"} }
	  //af:  { class: audio_file_out, in: { in:osc.out } args:{  fname:"$/out.wav"} }
        }
      }
    }

    // Play score through internal sampler
    ex_01_score_player: {

      network: {
      
        procs: {
	  player: { class:score_player, args:{ fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_2.csv" }, ui: { create_fl:true } },
	  
	  samp_vt:{ class: vel_table,  in:{ in:player.out }, args:{ vel_tbl_fname:"$/vel_table_perf.json", vel_tbl_label:"ivory" }},
	  
          vctl: { class: poly_voice_ctl, in:{ in:samp_vt.out }, args:{ voice_cnt:70, prune_thresh:35  } },

	  voice_poly: {
	    class: poly,
	    in: { count:vctl.voice_cnt }
	    args: { parallel_fl:false }

	    network: {
	      procs: {
	        voc: { class:piano_voice, in:{ _.in:_.vctl.out_ },
		                          out:{ _.done_fl:_.vctl.done_fl_ },
					  args:{ wtb_fname:"~/media/audio/wt6/wt_bank.json",
					  wtb_instr:"piano",
					  rls_coeff: 0.99,
					  rls_thresh:0.01 } },
					  
		//voc: { class:midi_voice, in:{_.in:_.vctl.out_ }, out:{ _.done_fl:_.vctl.done_fl_ }, args:{chCnt:2, gain:0.2 } },
	      }
	    }
	  }

	  amix: { class: audio_mix,   in:{ in_:voice_poly.voc_.out }     args:{ igain_:1.0 }},
	  aout: { class: audio_out,   in:{ in:amix.out }, args:{ dev_label:"main"}}
	  
        }
      }
    }

    // Simulate two pianos by routing the score MIDI to two different MIDI output ports
    ex_02_score_player: {

      network: {
      
        procs: {
	  player: { class:score_player, args:{ fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4_with_scriabin.csv" },
	                                     ui: { create_fl:true } },

	  rr: { class:recd_route, in:{ in:player.out } args:{ out_cnt:2, sel_field:"piano_id"}  }

	  mout_a: { class: midi_out, in:{ rin:rr.out0 }, args:{ print_fl:true,  dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1" } },
	  //mout_b: { class: midi_out, in:{ rin:rr.out1 }, args:{ print_fl:true,  dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2" } },
	  mout_b: { class: midi_out, in:{ rin:rr.out1 }, args:{ print_fl:false, dev_label:"iRig MIDI 2",  port_label:"iRig MIDI 2 MIDI 1" } ui: { create_fl:true }} 


        }
      }
    }



    // Trigger Spirio playback from the score
    ex_03_score_player: {
      network: {
        procs: {

	  player: { class:score_player, args:{ fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_2.csv" }, ui: { create_fl:true } },

	  sf: { class:score_follower_2, in:{ in:player.out }, args:{ b_loc:0, e_loc:2462, score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_2.csv"}, ui: { create_fl:true } }

	  mout_a: { class: midi_out, in:{ rin:player.out } args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1" }}

	  spirio_ctl: { class: score_player_ctl, in:{ in:sf.out }, args:{ cfg_fname:"$/spirio_ctl.cfg" } }

	  print: { class:print, in:{ in0:spirio_ctl.beg_loc, in1:spc.end_loc, eol_fl:spc.end_loc } args:{text:["beg","end",""]}}

	  spirio_ply: { class:score_player, in:{ b_loc:spirio_ctl.beg_loc, e_loc:spirio_ctl.end_loc, start:spirio_ctl.end_loc },
	                                  args:{ fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_2.csv" },
					    ui: { create_fl:true } },

	  mout_b: { class: midi_out, in:{ rin:spirio_ply.out } args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2" }}

	}
      } 
    }

    ex_04_rt: {
      network: {
        procs: {


	  midi_a: { class:midi_in,  args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  midi_b: { class:midi_in,  args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

	  rr_a: { class:recd_route, in:{ in:midi_a.r_out }, args:{ out_cnt:2, select:0, sel_field:"" }  },
	  rr_b: { class:recd_route, in:{ in:midi_b.r_out }, args:{ out_cnt:2, select:0, sel_field:"" }  },

	  rr_merge: { class:recd_merge, in:{ in0:rr_a.out0, in1:rr_b.out0 } },

	  sf: { class:score_follower_2, in: { in:rr_merge.out },
	                              args: { b_loc:0, e_loc:2462, score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_2.csv"},
				        ui: { create_fl:true } }

	
	}
      } 
    }

    ex_05_rt: {
      network: {
        procs: {


	  midi_a: { class:midi_in,  args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  midi_b: { class:midi_in,  args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

	  // switch MIDI off from a particular piano by routing messages to rr_a/b.out0
	  rr_a: { class:recd_route, in:{ in:midi_a.r_out }, args:{ out_cnt:2, select:1, sel_field:"" }  },
	  rr_b: { class:recd_route, in:{ in:midi_b.r_out }, args:{ out_cnt:2, select:1, sel_field:"" }  },

	  sf_a: { class:score_follower_2, in: { in:rr_a.out1 },
	                                args: { score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv"},
				          ui: { create_fl:true } }

	  sf_b: { class:score_follower_2, in: { in:rr_b.out1 },
	                                args: { score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv"},
				          ui: { create_fl:true } }

	  sf: { class:recd_merge, in:{ in0:sf_a.out0, in1:sf_b.out0 } },


	  g_ctl: { class:gutim_ctl, in:{ in:sf.out },
	                           args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_ctl.json" },
	                           out: { midi_ena_a:rr_a.select, midi_ena_b:rr_b.select
				          sf_a_beg_loc:sf_a.b_loc, sf_a_end_loc:sf_a.e_loc, sf_a_end_loc:sf_a.reset_trigger,
					  sf_b_beg_loc:sf_b.b_loc, sf_b_end_loc:sf_b.e_loc, sf_b_end_loc:sf_b.reset_trigger },
			            ui: { create_fl:true } } 
	
	  spirio_ply: { class:score_player, in: { b_loc:g_ctl.spirio_beg_loc, e_loc:g_ctl.spirio_end_loc, start:g_ctl.spirio_start_fl },
	                                  args: { fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv" },
	  				    ui: { create_fl:true } },

	  mout_b: { class: midi_out, in:{ rin:spirio_ply.out } args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2" }}

	}
      } 
    }

    ex_06_label_val_test: {
      network: {
        procs:{
	  menu_a: { class:label_value_list,
	          args: { cfg:{"A":0, "B":1, "C":2} },
	            ui: { create_fl:true } }

	  numb_a: { class:number, in: { in0:menu_a.out }, ui: { create_fl:true } }

	  print: { class:print, in:{ in0:menu_a.out, eol_fl:menu_a.out } args:{text:["test",,""]}}
	  /*
	  menu_b: { class:label_value_list,
	            args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/spirio_recover.json" }
		    ui: { create_fl:true } }

	  numb_b: { class:number, in: { in0:menu_b.out }, ui: { create_fl:true } }

	  menu_c: { class:label_value_list,
	            args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/sf_recover.json" }
		    ui: { create_fl:true }}

	  numb_c: { class:number, in: { in0:menu_c.out }, ui: { create_fl:true } }
	  */
	}
      }
    }


    ex_07_rt: {
      network: {
        procs: {

	  goto_menu: { class:label_value_list,
	              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_goto.json" }
		      ui: { create_fl:true } }


	  midi_a: { class:midi_in,  args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  midi_b: { class:midi_in,  args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

	  
	  sf_a: { class:score_follower_2, in: { in:midi_a.r_out },
	                                args: { score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv"},
				          ui: { create_fl:true } }

	  sf_b: { class:score_follower_2, in: { in:midi_b.r_out },
	                                args: { score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv"},
				          ui: { create_fl:true } }

	  // UI menu to set the score followers to a specified location or measure
	  // loc_a,loc_b inputs are used to setup sf_a and sf_b for their next expected input based on SF output
	  // loc2 is the manual override input from the 'spirio_now_ctl'.
	  // [ { loc:<>, sf:<0|1> b_loc:<> e_loc:<> } ]
	  reset_ctl: { class:gutim_sf_ctl, in: { goto_loc:goto_menu.out, loc_a:sf_a.out, loc_b:sf_b.out },
	                                  out: { b_loc_a:sf_a.b_loc, e_loc_a:sf_a.e_loc, reset_a:sf_a.reset_trigger,
					         b_loc_b:sf_b.b_loc, e_loc_b:sf_b.e_loc, reset_b:sf_b.reset_trigger }
	                                 args: { cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_sf_ctl.json"},
	                                   ui: { create_fl:true } },	  
					  

	}
      } 
    }

    ex_08_rt: {
      network: {
        procs: {

	  goto_menu: { class:label_value_list,
	              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_goto.json" }
		      ui: { create_fl:true } }


	  midi_a: { class:midi_in,  args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  midi_b: { class:midi_in,  args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

	  
	  sf_a: { class:score_follower_2, in: { in:midi_a.r_out },
	                                args: { score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv"},
				          ui: { create_fl:true } }

	  sf_b: { class:score_follower_2, in: { in:midi_b.r_out },
	                                args: { score_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv"},
				          ui: { create_fl:true } }



	  // UI menu to set the score followers to a specified location or measure
	  // loc_a,loc_b inputs are used to setup sf_a and sf_b for their next expected input based on SF output
	  // loc2 is the manual override input from the 'spirio_now_ctl'.
	  // [ { loc:<>, sf:<0|1> b_loc:<> e_loc:<> } ]
	  reset_ctl: { class:gutim_sf_ctl, in: { goto_loc:goto_menu.out, sf_a:sf_a.out, sf_b:sf_b.out },
	                                  out: { b_loc_a:sf_a.b_loc, e_loc_a:sf_a.e_loc, reset_a:sf_a.reset_trigger, enable_a:sf_a.enable_fl,
					         b_loc_b:sf_b.b_loc, e_loc_b:sf_b.e_loc, reset_b:sf_b.reset_trigger, enable_b:sf_b.enable_fl }
	                                 args: { cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_sf_ctl.json"},
	                                   ui: { create_fl:true } },

	  sf: { class:recd_merge, in:{ in0:sf_a.out0, in1:sf_b.out0 } },

	  spirio_ctl: { class:gutim_spirio_ctl, in: { sf_in:sf.out,
	                                              reset:goto_menu.out,
	                                              midi_in_a:midi_a.r_out,
						      midi_in_b:midi_b.r_out },
						      
	                                            args: { cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_spirio_ctl.json" }
						    ui:   { create_fl:true } }
						    
	  
	  spirio_ply: { class:score_player, in: { b_loc:spirio_ctl.b_loc, e_loc:spirio_ctl.e_loc, start:spirio_ctl.start_fl },
	                                  args: { fname:"/home/kevin/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_4.csv" },
	  				    ui: { create_fl:true } },

	  
	  mout_b: { class: midi_out, in:{ rin:spirio_ply.out } args:{ dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1" }}
				  

	}
      } 
    }



    ex_11_mult_plyr_nrt: {

      dur_limit_secs:1000.0,  // Run the network for 5 seconds
      non_real_time_fl: true,

      network: {
        procs: {
	  beg : { class: on_start, args:{ cycle_idx:0 } }
	  mp : { class: multi_player, in:{ start:beg.out },
	                              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/spirio_mult_play.json",
				             start_label:"spirio_1" }
				      ui: { create_fl:true } },

          cnt: { class:counter, in:{ trigger:mp.done_id } args: { init:1, out_type:uint, repeat_fl:false } },
	  nextL: { class:list, in:{ in:cnt.out },
	                            out:{ out:mp.play_id },
	                            args:{ list:[3,5,10,13,14,16,19,22,25,29] } }
	  
	  prt: { class:print, in:{ in0:cnt.out, in1:nextL.out, eol_fl:nextL.out } args:{ text:["cnt","next",""] }}

	}
      }
    } // ex_11_mult_plyr_nrt

    ex_12_mult_plyr: {

      network: {
        procs: {
	  player : { class: multi_player, 
	                              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/spirio_mult_play.json",
				             start_label:"spirio_1", play_excl_id:-1 }
				      ui: { create_fl:true } },

          cnt: { class:counter, in:{ trigger:player.done_id } args: { init:1, out_type:uint, repeat_fl:false } },
	  nextL: { class:list, in:{ in:cnt.out },
	                            out:{ out:player.play_id },
	                            args:{ list:[3,5,10,13,14,16,19,22,25,29] } }

	  prt: { class:print, in:{ in0:cnt.out, in1:nextL.out, eol_fl:nextL.out } args:{ text:["cnt","next",""] }}

	  samp_vt:{ class: vel_table,  in:{ in:player.out }, args:{ vel_tbl_fname:"$/vel_table_perf.json", vel_tbl_label:"ivory" }},


          vctl: { class: poly_voice_ctl, in:{ in:samp_vt.out }, args:{ voice_cnt:70, prune_thresh:35  } },

	  voice_poly: {
	    class: poly,
	    args: { count:70 , parallel_fl:false }

	    network: {
	      procs: {
	        voc: { class:piano_voice, in:{ _.in:_.vctl.out_ },
		                          out:{ _.done_fl:_.vctl.done_fl_ },
					  args:{ wtb_fname:"~/media/audio/wt6/wt_bank.json",
					  wtb_instr:"piano",
					  rls_coeff: 0.99,
					  rls_thresh:0.01 } },
					  
		//voc: { class:midi_voice, in:{_.in:_.vctl.out_ }, out:{ _.done_fl:_.vctl.done_fl_ }, args:{chCnt:2, gain:0.2 } },
	      }
	    }
	  }

	  amix: { class: audio_mix,   in:{ in_:voice_poly.voc_.out }     args:{ igain_:1.0 }},
	  aout: { class: audio_out,   in:{ in:amix.out }, args:{ dev_label:"main"}}

	  mout: { class:midi_out,  in:{ rin:player.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },


	}
      }
    } // ex_12_mult_plyr

    ex_13_mult_plyr: {

      network: {
        procs: {
	  player : { class: multi_player, 
	                              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/spirio_mult_play.json",
				             start_label:"spirio_1" }
				      ui: { create_fl:true } },
	  mout: { class:midi_out,  in:{ rin:player.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
        }
      }
    } // ex_13_mult_plyr

    ex_14_multi_plyr: {
    
      network: {
        procs: {
	  beg : { class: on_start, args:{ cycle_idx:0 }, ui: {create_fl:true} }
	  
	  simul_mp : { class: multi_player, in:{ start:beg.out },
	                              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_mult_play.json",
				             start_label:"gutim_1" }
				      ui: { create_fl:true } },


	  spirio_mp : { class: multi_player, 
	                              args:{ cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/spirio_mult_play.json",
				             start_label:"spirio_1" }
				      ui: { create_fl:true } },

	  simul_rt:  { class:recd_route, in:{ in:simul_mp.out },  args:{ out_cnt:2, sel_field:"port_id" }  },
	  spirio_rt: { class:recd_route, in:{ in:spirio_mp.out }, args:{ out_cnt:2, sel_field:"port_id" }  },

	  sf_a_merge: { class:recd_merge, in:{ in0:simul_rt.out0, in1:spirio_rt.out0 } },
	  sf_b_merge: { class:recd_merge, in:{ in0:simul_rt.out1, in1:spirio_rt.out1 } },



	  mout_a: { class:midi_out,  in:{ rin:sf_a_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  mout_b: { class:midi_out,  in:{ rin:sf_b_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

				      
        }
      }
    } // ex_14_multi_plyr

    ex_15_gutim_ctl: {
    
      network: {
        procs: {

          // Receive MIDI form the external 'Spirio Play Now' program.
	  m_in: { class:midi_in, args: { print_fl:true } },
	  play_now_in: { class:midi_select, in:{ in:m_in.out } args:{ sel_status:176, sel_byte_a:127 }  }

	  

          // Set the starting 'simul' segment
	  simul_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/simul_seg_menu.json" },
	                                     ui: { create_fl:true } },


	  simul_mp : { class: multi_player, in:{ start_seg_id:simul_seg_menu.out },
	                              args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/gutim_mult_play.json" },
				      ui: { create_fl:true } },


          // Set the starting 'spirio' segment
	  spirio_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_seg_menu.json" },
	                                     ui: { create_fl:true } },
					     
	  spirio_mp : { class: multi_player,  in: { start_seg_id:spirio_seg_menu.out },
	                              args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_mult_play.json" }
				      ui: { create_fl:true } },


          // Split incoming player messages to channel A or channel B
	  simul_rt:  { class:recd_route, in:{ in:simul_mp.out },  args:{ out_cnt:2, sel_field:"port_id" }  },
	  spirio_rt: { class:recd_route, in:{ in:spirio_mp.out }, args:{ out_cnt:2, sel_field:"port_id" }  },

	  // Merge channel-A message to one stream, and channel-B messages to another stream
	  sf_a_merge: { class:recd_merge, in:{ in0:simul_rt.out0, in1:spirio_rt.out0 } },
	  sf_b_merge: { class:recd_merge, in:{ in0:simul_rt.out1, in1:spirio_rt.out1 } },

	  
	  sf_a: { class:score_follower_2, in: { in:sf_a_merge.out },
	                                args: { score_fname:"~/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_5.csv"},
				          ui: { create_fl:false } },

	  sf_b: { class:score_follower_2, in: { in:sf_b_merge.out },
	                                args: { score_fname:"~/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_5.csv"},
				          ui: { create_fl:false } },

	  sf: { class:recd_merge, in:{ in0:sf_a.out0, in1:sf_b.out0 } },

          // Set the starting 'spirio' segment
	  all_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/all_seg_menu.json" },
	                                     ui: { create_fl:true } },

	  ctl: { class:gutim_pgm_ctl, in:{ sf_loc:sf.out, goto_seg:all_seg_menu.out, play_now:play_now_in.byte_b }
	                              out:{				            
				            sf_a_beg_loc:sf_a.b_loc, sf_a_end_loc:sf_a.e_loc, sf_a_reset_fl:sf_a.reset_trigger, sf_a_enable_fl:sf_a.enable_fl,
				            sf_b_beg_loc:sf_b.b_loc, sf_b_end_loc:sf_b.e_loc, sf_b_reset_fl:sf_b.reset_trigger, sf_b_enable_fl:sf_b.enable_fl,
					    
					    sim_play_id:simul_mp.play_id,  sim_reset_fl:simul_mp.reset,   sim_clear_fl:simul_mp.clear,
					    //spr_play_id:spirio_mp.play_id,
					    spr_reset_fl:spirio_mp.reset,  spr_play_now:spirio_mp.play_excl_id,
					    
					    },
				      args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/gutim_pgm_ctl.json"},
				      ui: { create_fl:true }}

          // Defer starting the spirio segment by waiting for particular key/pedal releases
	  spirio_ctl: { class:gutim_spirio_ctl, in: { seg_id_in:ctl.spr_play_id,
	                                              reset:ctl.reset,
	                                              midi_in_a:sf_a_merge.out,
						      midi_in_b:sf_b_merge.out },						      
					        out: { seg_id_out:spirio_mp.play_id },						
	                                        args: { cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_spirio_ctl.json" }
						ui:   { create_fl:false } }

	  mout_a: { class:midi_out,  in:{ rin:sf_a_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  mout_b: { class:midi_out,  in:{ rin:sf_b_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

	  m_record: { class:midi_recorder, in:{ rin:sf.out, write_fl:ctl.reset }, args:{ dir:"~/temp/currawong/cult/mr0/", fname:"record", alloc_cnt:102400 }}
				  
        }
      }
    } // ex_15_gutim_ctl

    ex_16_pgm_change_menu: {
      network: {
        procs: {


	  spirio_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,	
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_seg_menu.json" },
	                                     ui: { create_fl:true } },

	  mk_msg: { class: make_midi, in:{ byte_a:spirio_seg_menu.out, make_fl:spirio_seg_menu.out },
	                              args: { ch:0, status:192, byte_b:0 } }

	  mout: { class:midi_out,  in:{ rin:mk_msg.r_out }, args:{ print_fl:true, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },

	  
	}
      }
    }

    ex_17_midi_in: {
      network: {
        procs: {

	  //m_in_a: { class:midi_in, args:{ print_fl:true, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} }
	  //m_in_b: { class:midi_in, args:{ print_fl:true, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} }

	  m_in: { class:midi_in, args: { print_fl:true } },

	  m_sel: { class:midi_select, in:{ in:m_in.out } args:{ sel_status:176, sel_byte_a:127 }  }

	  prt: { class:print, in{ in0:m_sel.byte_b, eol_fl:m_sel.byte_b }, args{ text:[ "d1","." ] } }

	} 
      }
    }
   

    ex_18_gutim_ctl_nrt: {

      dur_limit_secs:1000.0,  
      non_real_time_fl: true,

      network: {
        procs: {

	  beg : { class:on_start, args:{ cycle_idx:10 }, ui: {create_fl:true} }


          // Receive MIDI form the external 'Spirio Play Now' program.
	  m_in: { class:midi_in, args: { print_fl:true } },
	  play_now_in: { class:midi_select, in:{ in:m_in.out } args:{ sel_status:176, sel_byte_a:127 }  }

	  

          // Set the starting 'simul' segment
	  simul_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/simul_seg_menu.json" },
	                                     ui: { create_fl:true } },


	  simul_mp : { class: multi_player, in:{ start_seg_id:simul_seg_menu.out, start:beg.out },
	                              args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/gutim_mult_play.json" },
				      ui: { create_fl:true } },


          // Set the starting 'spirio' segment
	  spirio_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_seg_menu.json" },
	                                     ui: { create_fl:true } },
					     
	  spirio_mp : { class: multi_player,  in: { start_seg_id:spirio_seg_menu.out },
	                              args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_mult_play.json" }
				      ui: { create_fl:true } },


          // Split incoming player messages to channel A or channel B
	  simul_rt:  { class:recd_route, in:{ in:simul_mp.out },  args:{ out_cnt:2, sel_field:"port_id" }  },
	  spirio_rt: { class:recd_route, in:{ in:spirio_mp.out }, args:{ out_cnt:2, sel_field:"port_id" }  },

	  // Merge channel-A message to one stream, and channel-B messages to another stream
	  sf_a_merge: { class:recd_merge, in:{ in0:simul_rt.out0, in1:spirio_rt.out0 } },
	  sf_b_merge: { class:recd_merge, in:{ in0:simul_rt.out1, in1:spirio_rt.out1 } },

	  
	  sf_a: { class:score_follower_2, in: { in:sf_a_merge.out },
	                                args: { score_fname:"~/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_5.csv"},
				          ui: { create_fl:false } },

	  sf_b: { class:score_follower_2, in: { in:sf_b_merge.out },
	                                args: { score_fname:"~/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_5.csv"},
				          ui: { create_fl:false } },

	  sf: { class:recd_merge, in:{ in0:sf_a.out0, in1:sf_b.out0 } },

          // Set the starting 'spirio' segment
	  all_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/all_seg_menu.json" },
	                                     ui: { create_fl:true } },

	  ctl: { class:gutim_pgm_ctl, in:{ sf_loc:sf.out, goto_seg:all_seg_menu.out, play_now:play_now_in.byte_b }
	                              out:{				            
				            sf_a_beg_loc:sf_a.b_loc, sf_a_end_loc:sf_a.e_loc, sf_a_reset_fl:sf_a.reset_trigger, sf_a_enable_fl:sf_a.enable_fl,
				            sf_b_beg_loc:sf_b.b_loc, sf_b_end_loc:sf_b.e_loc, sf_b_reset_fl:sf_b.reset_trigger, sf_b_enable_fl:sf_b.enable_fl,
					    
					    sim_play_id:simul_mp.play_id,  sim_reset_fl:simul_mp.reset,   sim_clear_fl:simul_mp.clear,
					    //spr_play_id:spirio_mp.play_id,
					    spr_reset_fl:spirio_mp.reset,  spr_play_now:spirio_mp.play_excl_id,
					    
					    },
				      args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/gutim_pgm_ctl.json"},
				      ui: { create_fl:true }}

          // Defer starting the spirio segment by waiting for particular key/pedal releases
	  spirio_ctl: { class:gutim_spirio_ctl, in: { seg_id_in:ctl.spr_play_id,
	                                              reset:ctl.reset,
	                                              midi_in_a:sf_a_merge.out,
						      midi_in_b:sf_b_merge.out },						      
					        out: { seg_id_out:spirio_mp.play_id },						
	                                        args: { cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_spirio_ctl.json" }
						ui:   { create_fl:false } }

	  mout_a: { class:midi_out,  in:{ rin:sf_a_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  mout_b: { class:midi_out,  in:{ rin:sf_b_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },

	  stop: { class:halt, in:{ uint_in:ctl.spr_play_id }, args:{ uint_sel:11 } }	  

	  // write a file after every segment runs
	  m_record: { class:midi_recorder, in:{ rin:sf.out, write_fl:ctl.spr_play_id }, args:{ dir:"~/temp/currawong/cult/mr0/", fname:"record", alloc_cnt:102400 }}


        }
      }
    } // ex_18_gutim_ctl_nrt


    ex_19_simul_audio: {
    
      network: {
        procs: {

	  m_in: { class:midi_in, args: { print_fl:true } },
	  play_now_in: { class:midi_select, in:{ in:m_in.out } args:{ sel_status:176, sel_byte_a:127 }  }

	  

          // Set the starting 'simul' segment
	  simul_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/simul_seg_menu.json" },
	                                     ui: { create_fl:true } },


	  simul_mp : { class: multi_player, in:{ start_seg_id:simul_seg_menu.out },
	                                  args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/gutim_mult_play.json" },
				             ui: { create_fl:true } },


          // Set the starting 'spirio' segment
	  spirio_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_seg_menu.json" },
	                                     ui: { create_fl:true } },
					     
	  spirio_mp : { class: multi_player,  in: { start_seg_id:spirio_seg_menu.out },
	                                    args: { cfg_fname:"~/src/currawong/projects/create_cult_event_score/spirio_mult_play.json" }
				              ui: { create_fl:true } },
				      

          // Split incoming player messages to channel A or channel B
	  simul_rt:  { class:recd_route, in:{ in:simul_mp.out },  args:{ out_cnt:2, sel_field:"port_id" }  },
	  spirio_rt: { class:recd_route, in:{ in:spirio_mp.out }, args:{ out_cnt:2, sel_field:"port_id" }  },

	  // Merge channel-A message to one stream, and channel-B messages to another stream
	  sf_a_merge: { class:recd_merge, in:{ in0:simul_rt.out0, in1:spirio_rt.out0 } },
	  sf_b_merge: { class:recd_merge, in:{ in0:simul_rt.out1, in1:spirio_rt.out1 } },

	  
	  sf_a: { class:score_follower_2, in: { in:sf_a_merge.out },
	                                args: { score_fname:"~/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_5.csv"},
				          ui: { create_fl:false } },

	  sf_b: { class:score_follower_2, in: { in:sf_b_merge.out },
	                                args: { score_fname:"~/src/currawong/projects/create_cult_event_score/score_cult_evt_20250929_5.csv"},
				          ui: { create_fl:false } },

	  sf: { class:recd_merge, in:{ in0:sf_a.out0, in1:sf_b.out0 } },

          // Set the starting 'spirio' segment
	  all_seg_menu : { class: label_value_list,
	                                    args:{ out_type:uint,
					           cfg_fname:"~/src/currawong/projects/create_cult_event_score/all_seg_menu.json" },
	                                     ui: { create_fl:true } },

	  ctl: { class:gutim_pgm_ctl, in:{ sf_loc:sf.out, goto_seg:all_seg_menu.out, play_now:play_now_in.byte_b }
	                              out:{				            
				            sf_a_beg_loc:sf_a.b_loc, sf_a_end_loc:sf_a.e_loc, sf_a_reset_fl:sf_a.reset_trigger, sf_a_enable_fl:sf_a.enable_fl,
				            sf_b_beg_loc:sf_b.b_loc, sf_b_end_loc:sf_b.e_loc, sf_b_reset_fl:sf_b.reset_trigger, sf_b_enable_fl:sf_b.enable_fl,
					    
					    sim_play_id:simul_mp.play_id,  sim_reset_fl:simul_mp.reset,   sim_clear_fl:simul_mp.clear,
					    //spr_play_id:spirio_mp.play_id,
					    spr_reset_fl:spirio_mp.reset,  spr_play_now:spirio_mp.play_excl_id,
					    
					    },
				      args:{ cfg_fname:"~/src/currawong/projects/create_cult_event_score/gutim_pgm_ctl.json"},
				      ui: { create_fl:true }}


          // Defer starting the spirio segment by waiting for particular key/pedal releases
	  spirio_ctl: { class:gutim_spirio_ctl, in: { seg_id_in:ctl.spr_play_id,
	                                              reset:ctl.reset,
	                                              midi_in_a:sf_a_merge.out,
						      midi_in_b:sf_b_merge.out },						      
					        out: { seg_id_out:spirio_mp.play_id },						
	                                        args: { cfg_fname:"/home/kevin/src/currawong/projects/create_cult_event_score/gutim_spirio_ctl.json" }
						ui:   { create_fl:false } }

	 samp_vt:{ class: vel_table, in:{ in:sf.out }, args:{ vel_tbl_fname:"$/vel_table_perf.json", vel_tbl_label:"ivory" }},

         // spirio-multi-player to Spirio MIDI
	 pian_vt_a:{ class: vel_table, in:{ in:spirio_rt.out0 }, args:{ vel_tbl_fname:"$/vel_table_perf.json", vel_tbl_label:"spirio_1" }},
	 pian_vt_b:{ class: vel_table, in:{ in:spirio_rt.out1 }, args:{ vel_tbl_fname:"$/vel_table_perf.json", vel_tbl_label:"spirio_1" }},
	 spirio_mout_a:   { class: midi_out,  in:{ rin:pian_vt_a.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1" } ui: { create_fl:false }} 
	 spirio_mout_b:   { class: midi_out,  in:{ rin:pian_vt_b.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2" } ui: { create_fl:false }} 

	  m_record: { class:midi_recorder, in:{ rin:sf.out, write_fl:ctl.reset }, args:{ dir:"~/temp/currawong/cult/mr0/", fname:"record", alloc_cnt:102400 }}

         vctl:   { class: poly_voice_ctl,             in:{ in:samp_vt.out , reset:ctl.reset},  args:{ voice_cnt:30, prune_thresh:15 } },

	 ps:     { class: gutim_ps, preset:init,      in:{ in:sf.out, midi_in_:vctl.out_, reset:ctl.reset, loc_cnt:sf_a.loc_cnt   },
	                                             preset: "init",
	                                             args:{ fname:"~/src/currawong/projects/create_cult_event_score/cult_evt_xforms.txt" },
						     ui:  { create_fl:true } },

	  xform_igain:  { class: number,   args:{ in:1.0f },  ui: { create_fl:true } },

	  voice_poly: {
	    class: poly,
	    in:   { count:vctl.voice_cnt },		  
	    args: { parallel_fl:false, thread_cnt:8, cpu_affinityL:[2,3,4,6,8,9,10,11] },

	    network: {
	      procs: {
	        voc: { class:piano_voice, in:{ _.in:_.vctl.out_ },
		                          out:{ _.done_fl:_.vctl.done_fl_ },
					  args:{ wtb_fname:"~/media/audio/wt6/wt_bank.json",
					         wtb_instr:"piano",
						 rls_coeff: 0.99 } },
						 
		g:     { class: audio_gain,       in:{ in:voc.out, gain:_.xform_igain.out }  },
	        pva:   { class: pv_analysis,      in:{ in:g.out, enable:voc.gate_fl, _.wndSmpN:_.ps.wnd_smp_cnt_ },  args:{ wndSmpN:512, hopSmpN:128, hzFl:false  } },
	        sd:    { class: spec_dist,        in:{ in:pva.out,
		                                       enable:voc.gate_fl,
		                                       _.ceiling:_.ps.ceiling_,
						       _.expo:_.ps.expo_,
						       _.thresh:_.ps.thresh_,
						       _.upr:_.ps.upr_,
						       _.lwr:_.ps.lwr_,
						       _.mix:_.ps.mix_ },  preset:kc, args:{ bypass:false }   },
		
                pvs:   { class: pv_synthesis,     in:{ in:sd.out, enable:voc.gate_fl  } },
	        cmp:   { class: compressor,       in:{ in:pvs.out,
		                                       enable:voc.gate_fl,
		                                       _.igain:_.ps.c_igain_,
						       _.ogain:_.ps.c_ogain_ }, preset:kc, args:{ bypass:false }   },
						       
		ogain: { class: audio_gain,       in:{ in:cmp.out, _.gain:_.ps.dry_gain_ } },
	      }

	    }
	  }


	  //am: { class: audio_merge, in: { in_:voice_poly.voc_.out} }
	  //am: { class: audio_merge, in: { in_:voice_poly.ogain_.out} }
	  //af:  { class: audio_file_out, in: { in:am.out }, args:{  fname:"$/out_fx.wav"} }
	 
	  wet_poly_mix: { class: audio_mix,   in:{ in_:voice_poly.ogain_.out } args:{ igain_:1.0 }},
	  dry_poly_mix: { class: audio_mix,   in:{ in_:voice_poly.voc_.out}    args:{ igain_:1.0 }},


	  // apply the wet/dry gain balance
	  wd_bal:       { class: balance, args{}},
	  wet_bal_gain: { class: audio_gain, in:{ in:wet_poly_mix.out, gain:wd_bal.out }     },
	  dry_bal_gain: { class: audio_gain, in:{ in:dry_poly_mix.out, gain:wd_bal.inv_out } },

	  mstr_wet_out: { class: audio_gain, in:{ in:wet_bal_gain.out }, args:{ gain:0.5 } }
	  mstr_dry_out: { class: audio_gain, in:{ in:dry_bal_gain.out }, args:{ gain:0.5 } },
	   

	  // merge the wet/dry signals into a single 4 channel signal
	  merge: { class: audio_merge,   in:{ in0:mstr_wet_out.out, in1:mstr_dry_out.out }  },

	  // delay the incoming signal to sync it with the piano
	  //sync_delay { class: audio_delay, in: { in:merge.out }, args:{ delayMs:400 }}

          //aout:  { class: audio_out,     in:{ in:sync_delay.out }, args:{ dev_label:"main" } },

	  sel_two: { class: audio_split, in:{ in:merge.out } args:{ select[0,0,1,1]} }
	  aout:  { class: audio_out,     in:{ in:sel_two.out0 }, args:{ dev_label:"main" } },

	  //wd_mix: { class:audio_mix, in:{ in0:mstr_wet_out.out, in1:mstr_dry_out.out } args:{igain_:0.8}}

	  //aout:  { class: audio_out,     in:{ in:wd_mix.out }, args:{ dev_label:"main" } },
	  
	  //af:  { class: audio_file_out, in: { in:wd_mix.out }, args:{  fname:"$/out.wav"} }

	  //aout:  { class: audio_out,     in:{ in:dry_poly_mix.out }, args:{ dev_label:"main" } },

	  //mout_a: { class:midi_out,  in:{ rin:sf_a_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 1"} },
	  //mout_b: { class:midi_out,  in:{ rin:sf_b_merge.out }, args:{ print_fl:false, dev_label:"MIDIFACE 2x2", port_label:"MIDIFACE 2x2 Midi Out 2"} },
				  
        }
      }
    } // ex_19_gutim_ctl_audio


  } // programs
} // 