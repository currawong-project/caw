
{
  base_dir:    "~/src/caw/src/caw/perf/io",
  io_dict:     "~/src/caw/src/caw/cfg/io.cfg"            // Runtime configuration file.
  proc_dict:   "~/src/caw/src/libcw/flow/proc_dict.cfg", // Processor class definition file.
  udp_dict:    "~/src/caw/src/libcw/flow/udp_dict.cfg",  // User defined proc files 
    
  programs: {

    example_00:
    {

      network: {

        procs: {
          lfo:   { class: sine_tone, args:{ hz:3, dc:440, gain:110 }
	   presets: {
	    a:{ hz:2 },
	    b:{ hz:3 },
	    c:{ hz:4 },
	    d:{ hz:5 }
	   }
	  },
	  
          sh:    { class: sample_hold, in:{ in:lfo.out } }
          osc:   { class: sine_tone,   in:{ hz:sh.out },   args:{ ch_cnt:2 } },
          gain:  { class: audio_gain,  in:{ in:osc.out },  args:{ gain:0.3 } },
          aout:  { class: audio_out,   in:{ in:gain.out }, args:{ dev_label:"main"} }
        }
	
        presets:
        {
           a: { lfo:a, gain:{ gain:0.2 } },        //  One value sets both channels.
           b: { lfo:b, gain:{ gain:[0.1,0.3] } },  //  Multi-channel preset.
           c: { lfo:c, gain:mute_on  },            //  Apply a class preset
           d: { lfo:d, gain:mute_off  },           //  Apply a class preset with an ignored 'init' variable.
        }
      }
    }

    example_01:
    {

      network: {

        procs: {
          osc:    { class: sine_tone, args: { ch_cnt:6, hz:[110,220,440,880,1760, 3520] }},
          split:  { class: audio_split, in:{ in:osc.out }, args: { select:[ 0,0, 1,1, 2,2 ] } },

          // Create three gain controls: g:0,g:1,g:2 using the processor label numeric suffix syntax.
          g0: { class:audio_gain, in:{ in:split0.out0 }, args:{ gain:0.9} },
          g1: { class:audio_gain, in:{ in:split0.out1 }, args:{ gain:0.5} },
          g2: { class:audio_gain, in:{ in:split0.out2 }, args:{ gain:0.2} },
                  
          merge: { class: audio_merge, in:{ in_:g_.out } },
          out:   { class: audio_out, in:{ in:merge.out },  args:{ dev_label:"main" }}
        }
	
        presets:
        {
          a: { g_:   { gain:0.1 } }, // Use underscore notation to apply a preset value to g0,g1,g2.
          b: { g0_2: { gain:0.2 } }, // Use underscore notation to apply a preset value to g0 and g1.
          c: { g2:   { gain:0.3 } }, // Apply a preset value to g2 only.
        }
      }
    }


    example_02:
    {

      network: {

        procs: {

          // LFO gain parameters - one per poly voice
          g_list:  { class: list, args: { in:0, list:[ 110f,220f,440f ]}},

          // LFO DC offset parameters - one per poly voice
          dc_list: { class: list, args: { in:0, list:[ 220f,440f,880f ]}},
          
          osc_poly: {
            class: poly,
            args: { count:3 },  // Create 3 instances of 'network'.
           
            network: {
              procs: {
                lfo:  { class: sine_tone,   in:{ _.dc:_.dc_list.value_, _.gain:_.g_list.value_ }  args: { ch_cnt:1, hz:3 }},
                sh:   { class: sample_hold, in:{ in:lfo.out }},
                osc:  { class: sine_tone,   in:{ hz: sh.out }},
             },
	 
	     presets:
	     {
	       aa:{ osc:{ gain:0.3 }, lfo:lfo1 }, 
	       bb:{ osc:{ gain:0.4 }, lfo:lfo2 },
	       cc:{ osc2:{ gain:0.1 }, osc0_2: { gain:0.2 }, lfo:lfo3 },
	       dd:{ osc0_2: { gain:0.5 } }
	     }
           }               
         }

         // Iterate over the instances of `osc_poly.osc_.out` to create one `audio_merge`
         // input for every output from the polyphonic network.
         merge: { class: audio_merge,    in:{ in_:osc_poly.osc_.out}, args:{ gain:1, out_gain:0.5 }},
         aout:  { class: audio_out,      in:{ in:merge.out }          args:{ dev_label:"main"} }

	}
	
	presets: {
          a:{ osc_poly:aa, merge:{ out_gain:0.3 } },
          b:{ osc_poly:bb, merge:{ out_gain:0.2 } },
          c:{ osc_poly:cc, merge:{ out_gain:0.1 } },
	  d:{ osc_poly:dd }
	}
      }
    }   

    example_03:
    {
      network: {

        procs: {

          osc_poly: {
            class: poly,
	    
	    // For het-poly networks the 'count' value given
	    // in the top level proc is the default value for
	    // the poly-count for following networks.
	    // This value may be overriden in the network
	    // definition itself - as it is in this example.
            args: { count:2, parallel_fl:true }, 
           
            network: {
	      net_a: {
	        count: 4,  // override higher level 'count'
		
                procs: {
                  osc:  { class: sine_tone,   args:{ hz: 100 }},
                },
		
		presets:
		{
		  a: { osc:{ hz:110 } },
		  b: { osc:{ hz:120 } },
		}
	      },
	      
	      net_b: {
	        count 3, // override higher level 'count'
                procs: {
                  osc:  { class: sine_tone,   args:{ hz: 200 }},
                },
		
		presets:
		{
		  a: { osc:{hz:220} },
		  b: { osc:{hz:230} }
		}
	      }
            },

            presets: {
	      aa: { net_a:a, net_b:a },
	      bb: { net_a:b, net_b:b },
	    }
           
         }

         // Iterate over the instances of `osc_poly.osc_.out` to create one `audio_merge`
         // input for every output from the polyphonic network.
         merge: { class: audio_merge,    in:{ in_:osc_poly.osc_.out}, args:{ gain:1, out_gain:0.5 }
	   presets: {
	     a:{ gain:0.3 }
	     b:{ gain:0.2 }
	   }
	 },
         aout:  { class: audio_out,      in:{ in:merge.out }          args:{ dev_label:"main"} }

	}
	
	presets: {
          a:{ osc_poly1:aa,   merge:a },
          b:{ osc_poly0_2:bb, merge:b },
          c:{ osc_poly:bb,    merge:{ out_gain:0.1 } },
	  d:{ osc_poly0:bb,   merge:{ out_gain:0.05} }
	}
      }
    }   




  }
}
