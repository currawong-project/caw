{
  param: 5,
  base_dir: "~/src/caw/examples",
  proc_dict: "~/src/caw/examples/proc_dict.cfg",
  subnet_dict: "~/src/caw/examples/subnet_dict.cfg",
  mode: non_real_time,
  
  
  programs: {

    sine_file_01: {

      durLimitSecs:5.0,

      network: {

        procs: {
          osc: { class: sine_tone },
          af:  { class: audio_file_out, in: { in:osc.out } args:{  fname:"$/out.wav"} }
        } 
      }          
    }


    mod_sine_02: {

      durLimitSecs:5.0,

      network: {

        procs: {
          lfo:   { class: sine_tone, args:{ hz:3, dc:440, gain:110 }}
          sh:    { class: sample_hold,            in:{ in:lfo.out } }
          osc:   { class: sine_tone, preset:mono, in:{ hz:sh.out } },         
          af:    { class: audio_file_out,         in: { in:osc.out } args:{  fname:"$/out.wav"} }
        }
      }
    }

    presets_03: {

      durLimitSecs:5.0,
      preset: "a",

      network: {

        procs: {
          lfo:   { class: sine_tone, args:{ hz:3, dc:440, gain:110 }}
          sh:    { class: sample_hold,    in:{ in:lfo.out } }
          osc:   { class: sine_tone,      in:{ hz:sh.out } },         
          af:    { class: audio_file_out, in: { in:osc.out } args:{  fname:"$/out.wav"} }
        }

        presets:
        {
	  a: { lfo: { hz:1.0, dc:880 }, osc: { gain:0.95 } },
	  b: { lfo: { hz:2.0, dc:220 }, osc: { gain:0.75 } },
	  c: { lfo: a880 },
	  d: [ a,b,0.5 ]
          
        }
      }
    }

    program_04: {
    
        durLimitSecs: 10.0,
	
	network {
	  procs: {
	      tmr:   { class: timer,                               args:{ period_ms:1000.0 }},
	      cnt:   { class: counter,  in: { trigger:tmr.out },   args:{ min:0, max:3, inc:1, init:0, mode:modulo } },
	      print: { class: print,    in: { in:cnt.out, eol_fl:cnt.out }, args:{ text:["my","count"] }}
	  }
	}
      }
    
    mult_inputs_05: {
    
        durLimitSecs: 10.0,
	
	network: {
	  procs: {
	      tmr:   { class: timer,                               args:{ period_ms:1000.0 }},
	      cnt:   { class: counter,  in: { trigger:tmr.out },   args:{ min:0, max:3, inc:1, init:0, mode:modulo } },
              numb:  { class: number,                              args:{ value:3 }},
              sum:   { class: add,      in: { in0:cnt.out, in1:numb.value } },
	      print: { class: print,    in: { in0:cnt.out, in1:sum.out, eol_fl:cnt.out }, args:{ text:["cnt","add","count"] }}
	  }
	}
      }

   mult_conn_06: {
     durLimitSecs: 5.0,

     network: {
       procs: {
         osc:    { class: sine_tone, args: { chCnt:6, hz:[110,220,440,880,1760, 3520] }},
         split:  { class: audio_split, in:{ in:osc.out }, args: { select:[ 0,0, 1,1, 2,2 ] } },
         
         // Create merge.in0,in1,in2 by iterating across all outputs of 'split'.
         merge_a: { class: audio_merge, in:{ in_:split.out_ } },
         af_a:    { class: audio_file_out, in:{ in:merge_a.out },  args:{ fname:"$/out_a.wav" }}
      
        // Create merge.in0,in1 and connect them to split.out0 and split.out1
        merge_b:  { class: audio_merge, in:{ in_:split.out0_2 } },
        af_b:     { class: audio_file_out, in:{ in:merge_b.out },  args:{ fname:"$/out_b.wav" }}
      
        // Create merge.in0,in1 and connect them both to split.out1
        merge_c:  { class: audio_merge, in:{ in0_2:split.out1 } },
        af_c:     { class: audio_file_out, in:{ in:merge_c.out },  args:{ fname:"$/out_c.wav" }}
         
       }
     } 
   }

   proc_suffix_07: {
     durLimitSecs: 5.0,

     network: {
       procs: {
         osc:    { class: sine_tone, args: { chCnt:6, hz:[110,220,440,880,1760, 3520] }},
         split:  { class: audio_split, in:{ in:osc.out }, args: { select:[ 0,0, 1,1, 2,2 ] } },

	 g0: { class:audio_gain, in:{ in:split0.out0 }, args:{ gain:0.9} },
	 g1: { class:audio_gain, in:{ in:split0.out1 }, args:{ gain:0.5} },
	 g2: { class:audio_gain, in:{ in:split0.out2 }, args:{ gain:0.1} },
	 
         
         merge: { class: audio_merge, in:{ in_:g_.out } },
         af:    { class: audio_file_out, in:{ in:merge.out },  args:{ fname:"$/out_a.wav" }}
      
         
       }
     } 
   }
    


  }
}